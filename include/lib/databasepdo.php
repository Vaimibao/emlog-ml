<?php

/**
 * PDO Database Connection
 *
 * @package EMLOG
 * @link https://www.emlog.net
 */

class DatabasePDO
{
    /**
     * Internal instance object
     * @var object DatabasePDO
     */
    private static $instance = null;

    /**
     * Number of queries
     * @var int
     */
    private $queryCount = 0;

    /**
     * Internal Data Connection Object
     * @var PDO
     */
    private $conn;

    /**
     * Internal data results
     */
    private $result;

    /**
     * Database type
     * @var string
     */
    private $dbType;

    private function __construct($dbType = 'mysql')
    {
        if (!class_exists('PDO')) {
            emMsg(lang('pdo_not_supported'));
        }

        $this->dbType = $dbType;

        try {
            if ($this->dbType === 'mysql') {
                $dsn = 'mysql:host=' . DB_HOST . ';dbname=' . DB_NAME . ';charset=utf8mb4';
                $options = [];
                $dbh = new PDO($dsn, DB_USER, DB_PASSWD, $options);
            } else {
                throw new PDOException(lang('unsupported_database_type') . " $this->dbType");
            }

            $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   // Set that if the SQL statement is executed incorrectly, an exception will be thrown and the transaction will be rolled back automatically
            $dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);           // Disable the simulation effect of prepared statements (SQL injection prevention)

            $this->conn = $dbh;
        } catch (PDOException $e) {
            emMsg(lang('pdo_connect_error') . $e->getMessage());
        }
    }

    /**
     * Static method, return the database connection instance
     */
    public static function getInstance($dbType = 'mysql')
    {
        if (self::$instance === null) {
            self::$instance = new DatabasePDO($dbType);
        }

        return self::$instance;
    }

    /**
     * Send Query Statement
     * @throws PDOException
     */
    function query($sql, $ignore_err = FALSE)
    {
        try {
            $this->result = $this->conn->query($sql);
            $this->queryCount++;
            if (!$ignore_err && 1046 == $this->geterrno()) {
                emMsg(lang('db_error_name'));
            }
            if (!$ignore_err && !$this->result) {
                throw new PDOException(lang('db_sql_error') . ": {$sql}<br />" . implode(' ', $this->geterror()));
            }
            return $this->result;
        } catch (PDOException $e) {
            if ($ignore_err) {
                return false;
            }
            emMsg($e->getMessage());
        }
    }

    /**
     * Get the number of rows
     */
    function num_rows($query)
    {
        return $query->rowCount();
    }

    /**
     * Escapes special characters
     */
    function escape_string($sql)
    {
        return trim($sql);
        // return $this->conn->quote($sql);
    }

    /**
     * Close database connection
     */
    function close()
    {
        if ($this->result instanceof PDOStatement) {
            $this->result->closeCursor();
            $this->result = null;
        }
        if (!is_null($this->conn)) {
            $this->conn = null;
        }
    }

    /**
     * Get a row from the result set as a numeric index array
     */
    function fetch_array($query, $type = PDO::FETCH_ASSOC)
    {
        return $query->fetch($type);
    }

    /**
     * Get a row from the result set as an associative array/numeric index array
     */
    public function fetch_all($sql, $fetchMode = PDO::FETCH_ASSOC)
    {
        try {
            $statement = $this->query($sql);
            if (!$statement instanceof \PDOStatement) {
                return [];
            }
            $data = [];
            while ($row = $this->fetch_array($statement, $fetchMode)) {
                $data[] = $row;
            }
            return $data;
        } catch (PDOException $e) {
            emMsg($e->getMessage());
        }
    }

    /**
     * Get a row from the result set
     * @param $sql
     * @return mixed
     */
    function once_fetch_array($sql)
    {
        try {
            $result = $this->conn->query($sql);
            $resultDb = $result->fetchAll(PDO::FETCH_ASSOC);
            return isset($resultDb[0]) ? $resultDb[0] : [];
        } catch (\PDOException $e) {
            emMsg($e->getMessage());
        }
    }

    /**
     * Get a row from the result set as a numeric index array
     */
    function fetch_row($query)
    {
        return $query->rowCount();
    }

    /**
     * Get the number of fields in the result set
     */
    function num_fields($query)
    {
        return $query->fetchColumn();
    }

    /**
     * Get the ID generated by the previous INSERT operation
     */
    function insert_id()
    {
        return $this->conn->lastInsertId();
    }

    /**
     * Get mysql error
     */
    function geterror()
    {
        return $this->conn->errorInfo();
    }

    /**
     * Get mysql error code
     */
    function geterrno()
    {
        return $this->conn->errorCode();
    }

    /**
     * Get number of affected rows in previous MySQL operation
     */
    function affected_rows()
    {
        if ($this->result) {
            return $this->result->rowCount();
        }
        return 0;
    }

    /**
     * Get database version information
     */
    function getVersion()
    {
        try {
            return $this->conn->query('select version()')->fetchColumn();
        } catch (PDOException $e) {
            emMsg($e->getMessage());
        }
    }

    /**
     * Get the number of database queries
     */
    function getQueryCount()
    {
        return $this->queryCount;
    }
}
